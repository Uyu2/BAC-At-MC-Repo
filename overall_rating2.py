# -*- coding: utf-8 -*-
"""Overall Rating2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WAm062oQKcdKVZXl6cW_zZNx0wfTt_U0
"""

import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
from sklearn.model_selection import train_test_split, GridSearchCV, RandomizedSearchCV
from sklearn.linear_model import LogisticRegression, Lasso, Ridge
from sklearn.preprocessing import StandardScaler

penalties = pd.read_csv('penalties.csv',encoding='iso-8859-1')
provider = pd.read_csv('provider.csv',encoding='iso-8859-1')
health = pd.read_csv('health.csv',encoding='iso-8859-1')
cost = pd.read_csv('cost.csv', encoding = 'iso-8859-1')

cost.rename(columns={'Provider CCN': 'Federal Provider Number'}, inplace=True)


SE = cost.copy()
SE['Liquidated Value'] = SE['Total Assets'] - SE['Total liabilities']
SE['ROI'] = (SE['Net Income'] / SE['Liquidated Value'] * 100).round(0)
SE['ROA'] = (SE['Net Income'] / SE['Total Assets'] * 100).round(0)

fin = SE[['Federal Provider Number', 'State Code', 'Zip Code', 'Total Assets', 'Total liabilities', 'Net Income', 'ROI', 'ROA']].copy()
fin

penalties

provider

health

agg_penalties = penalties.groupby('Federal Provider Number').agg(
    Total_Fine_Amount=('Fine Amount', 'sum'),
    Fine_Count=('Fine Amount', 'count')).reset_index()

agg_penalties

agg_health = health.groupby('Federal Provider Number').agg(
    Deficiency_Count=('Survey Date', 'count')
).reset_index()

agg_health

agg_health['Federal Provider Number'] = agg_health['Federal Provider Number'].astype(str)
agg_penalties['Federal Provider Number'] = agg_penalties['Federal Provider Number'].astype(str)
fin['Federal Provider Number'] = fin['Federal Provider Number'].astype(str)

new_df = pd.merge(agg_health, agg_penalties, on='Federal Provider Number', how='inner')
new_df = pd.merge(new_df, fin, on='Federal Provider Number', how='inner')
new_df

df = pd.merge(new_df, provider, on='Federal Provider Number', how='inner')
df

columns_to_drop = [
    'Provider Name', 'Provider Address', 'Provider Phone Number',
    'Provider City', 'Provider County Name', 'Average Number of Residents per Day Footnote',
    'Legal Business Name', 'Special Focus Status', 'Overall Rating Footnote',
    'Health Inspection Rating', 'Health Inspection Rating Footnote',
    'QM Rating', 'QM Rating Footnote', 'Long-Stay QM Rating',
    'Long-Stay QM Rating Footnote', 'Short-Stay QM Rating',
    'Short-Stay QM Rating Footnote', 'Staffing Rating', 'Staffing Rating Footnote',
    'RN Staffing Rating', 'RN Staffing Rating Footnote', 'Reported Staffing Footnote',
    'Physical Therapist Staffing Footnote', 'Location',
    'Total Amount of Fines in Dollars','Adjusted Total Nurse Staffing Hours per Resident per Day',
    'Adjusted RN Staffing Hours per Resident per Day',
    'Adjusted LPN Staffing Hours per Resident per Day',
    'Adjusted Nurse Aide Staffing Hours per Resident per Day',
    'Reported LPN Staffing Hours per Resident per Day',
    'Case-Mix Total Nurse Staffing Hours per Resident per Day',
    'Case-Mix RN Staffing Hours per Resident per Day',
    'Case-Mix LPN Staffing Hours per Resident per Day',
    'Case-Mix Nurse Aide Staffing Hours per Resident per Day',
    'Reported Physical Therapist Staffing Hours per Resident Per Day',
    'Reported Total Nurse Staffing Hours per Resident per Day',
    'Reported Licensed Staffing Hours per Resident per Day',
    'Reported RN Staffing Hours per Resident per Day',
    'Reported Nurse Aide Staffing Hours per Resident per Day',
    'Rating Cycle 3 Standard Health Survey Date',
    'Average Number of Residents per Day',
    'Rating Cycle 2 Standard Health Survey Date',
    'Total Weighted Health Survey Score', 'Total liabilities', 'Rating Cycle 3 Health Revisit Score',
    'Rating Cycle 3 Total Health Score', 'Rating Cycle 3 Number of Health Revisits',
    'Rating Cycle 2 Health Revisit Score',
    'Rating Cycle 2 Total Health Score', 'Rating Cycle 2 Number of Health Revisits',
    'Rating Cycle 1 Health Revisit Score',
    'Rating Cycle 1 Total Health Score', 'Rating Cycle 1 Number of Health Revisits',
    'Rating Cycle 3 Health Deficiency Score', 'Rating Cycle 3 Number of Complaint Health Deficiencies',
    'Rating Cycle 3 Number of Standard Health Deficiencies', 'Rating Cycle 3 Total Number of Health Deficiencies',
    'Rating Cycle 2 Health Deficiency Score', 'Rating Cycle 2 Number of Complaint Health Deficiencies',
    'Rating Cycle 2 Number of Standard Health Deficiencies', 'Rating Cycle 2 Total Number of Health Deficiencies',
    'Rating Cycle 1 Health Deficiency Score', 'Rating Cycle 1 Number of Complaint Health Deficiencies',
    'Rating Cycle 1 Number of Standard Health Deficiencies', 'Rating Cycle 1 Total Number of Health Deficiencies', 'Provider Zip Code', 'Provider SSA County Code',
    'Number of Citations from Infection Control Inspections', 'Provider State', 'Resident', 'Total Assets', 'Total Liabilities', 'Net Income']

columns_to_drop = [col for col in columns_to_drop if col in df.columns]

df.drop(columns=columns_to_drop, inplace=True)

df

df.isna().mean().sort_values(ascending=False).head(5)

df.dropna(subset=['Overall Rating'], inplace=True)
df.isna().mean().sort_values(ascending=False).head(5)

df.info()

df.drop('Federal Provider Number', axis=1, inplace = True)

from sklearn.preprocessing import LabelEncoder
from pandas.api.types import is_string_dtype

label_encoder = LabelEncoder()

for col in df.columns:
    if is_string_dtype(df[col]):
        if df[col].nunique() < 4:
            df = pd.get_dummies(df, columns=[col], prefix=[col])
        else:
            df[col] = label_encoder.fit_transform(df[col])

df.rename(columns={
    'Date First Approved to Provide Medicare and Medicaid Services':'Date began Medicare & Medicaid',
    'Rating Cycle 1 Standard Survey Health Date':'Survey Health Date'
}, inplace=True)

df = df.dropna()
df = df.replace([np.inf, -np.inf], np.nan).dropna()

y = df['ROI']
X = df.drop('ROI', axis=1)

from sklearn.ensemble import RandomForestRegressor
import seaborn as sns

categorical_cols = ['With a Resident and Family Council']

X_encoded = pd.get_dummies(X, columns=categorical_cols)

model = RandomForestRegressor()
model.fit(X_encoded, y)

feature_importances = pd.Series(model.feature_importances_, index=X_encoded.columns)
sorted_importances = feature_importances.sort_values(ascending=False).head(6)

# Prepare data for plotting
sorted_importances_df = sorted_importances.reset_index()
sorted_importances_df.columns = ['Feature', 'Importance']

# Plot
plt.figure(figsize=(10, 6))
sns.barplot(x='Importance', y='Feature', data=sorted_importances_df, color='green')
plt.title('Overall Rating Feature Importances')
plt.xlabel('Importance')
plt.ylabel('Feature')
plt.show()